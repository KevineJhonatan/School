// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Infrastructure;

#nullable disable

namespace School.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20240314201302_AddErrorAdmin")]
    partial class AddErrorAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("School.Core.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSuper")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(6953),
                            CreatedBy = 1,
                            DOB = new DateTime(2024, 3, 14, 23, 13, 2, 170, DateTimeKind.Local).AddTicks(324),
                            Firstname = "Admin",
                            Gender = "M",
                            IsSuper = true,
                            Lastname = "Admin",
                            Login = "Admin",
                            Password = "9d1dcd944007aae2128b93513c1ed1eb3e4fa952a356d51205d82f2b668d6438",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 178, DateTimeKind.Local).AddTicks(5370),
                            CreatedBy = 1,
                            DOB = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7916),
                            Firstname = "Camil",
                            Gender = "M",
                            IsSuper = false,
                            Lastname = "Vitale",
                            Login = "vitale@gmail.com",
                            Password = "9683f1c52eb029d8550223700c87e3e21127c5142301c2be1f0670ca65c9f1b0",
                            SchoolId = 2
                        });
                });

            modelBuilder.Entity("School.Core.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("date");

                    b.Property<int>("ClassCalendarId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Status_Id")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassCalendarId");

                    b.HasIndex("Status_Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("School.Core.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Level_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Level_Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 178, DateTimeKind.Local).AddTicks(5424),
                            CreatedBy = 2,
                            Description = "",
                            Level_Id = 6,
                            Name = "Maternnel",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 178, DateTimeKind.Local).AddTicks(5441),
                            CreatedBy = 2,
                            Description = "",
                            Level_Id = 7,
                            Name = "12 ème",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 178, DateTimeKind.Local).AddTicks(5454),
                            CreatedBy = 2,
                            Description = "",
                            Level_Id = 8,
                            Name = "11 ème",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 178, DateTimeKind.Local).AddTicks(5467),
                            CreatedBy = 2,
                            Description = "",
                            Level_Id = 9,
                            Name = "10 ème",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 178, DateTimeKind.Local).AddTicks(5480),
                            CreatedBy = 2,
                            Description = "",
                            Level_Id = 10,
                            Name = "9 ème",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 178, DateTimeKind.Local).AddTicks(5494),
                            CreatedBy = 2,
                            Description = "",
                            Level_Id = 11,
                            Name = "8 ème",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 178, DateTimeKind.Local).AddTicks(5508),
                            CreatedBy = 2,
                            Description = "",
                            Level_Id = 12,
                            Name = "7 ème",
                            SchoolId = 2
                        });
                });

            modelBuilder.Entity("School.Core.Entities.ClassCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek_Id")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(0)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DayOfWeek_Id");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassCalendar");
                });

            modelBuilder.Entity("School.Core.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("School");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 170, DateTimeKind.Local).AddTicks(246),
                            CreatedBy = 1,
                            Description = "AdminSchool",
                            IsActive = false,
                            Name = "AdminSchool"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7896),
                            CreatedBy = 1,
                            Description = "Vitale",
                            Name = "Vitale"
                        });
                });

            modelBuilder.Entity("School.Core.Entities.SchoolYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolYear");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 178, DateTimeKind.Local).AddTicks(5401),
                            CreatedBy = 2,
                            EndDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SchoolId = 2,
                            StartDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("School.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("School.Core.Entities.StudentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentHistory");
                });

            modelBuilder.Entity("School.Core.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("School.Core.Entities.SysParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SysParam");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ATTENDANCE_STATUS",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7172),
                            CreatedBy = 1,
                            Description = "Présence",
                            Title = "Présence"
                        },
                        new
                        {
                            Id = 2,
                            Code = "CLASS_LEVEL",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7241),
                            CreatedBy = 1,
                            Description = "Niveau",
                            Title = "Niveau"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DAY_OF_WEEK",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7555),
                            CreatedBy = 1,
                            Description = "Jours de la semaine",
                            Title = "Jours de la semaine"
                        },
                        new
                        {
                            Id = 4,
                            Code = "ERRORS",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7666),
                            CreatedBy = 1,
                            Description = "Errors",
                            Title = "Errors"
                        });
                });

            modelBuilder.Entity("School.Core.Entities.SysParamValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("DecimalValue1")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IntValue1")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LongText1")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortText1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SysParamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SysParamId");

                    b.ToTable("SysParamValue");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "PRESENT",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7207),
                            CreatedBy = 1,
                            ShortText1 = "Present",
                            SysParamId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "ABSENT",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7225),
                            CreatedBy = 1,
                            ShortText1 = "Absent",
                            SysParamId = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "CLASS_LEVEL_1",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7257),
                            CreatedBy = 1,
                            IntValue1 = 1,
                            ShortText1 = "Petite section",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 4,
                            Code = "CLASS_LEVEL_2",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7271),
                            CreatedBy = 1,
                            IntValue1 = 2,
                            ShortText1 = "Moyenne section",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 5,
                            Code = "CLASS_LEVEL_3",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7285),
                            CreatedBy = 1,
                            IntValue1 = 3,
                            ShortText1 = "Grande section",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 6,
                            Code = "CLASS_LEVEL_4",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7306),
                            CreatedBy = 1,
                            IntValue1 = 4,
                            ShortText1 = "Maternelle",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 7,
                            Code = "CLASS_LEVEL_5",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7319),
                            CreatedBy = 1,
                            IntValue1 = 5,
                            ShortText1 = "12 ème",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 8,
                            Code = "CLASS_LEVEL_6",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7333),
                            CreatedBy = 1,
                            IntValue1 = 6,
                            ShortText1 = "11 ème",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 9,
                            Code = "CLASS_LEVEL_7",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7346),
                            CreatedBy = 1,
                            IntValue1 = 7,
                            ShortText1 = "10 ème",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 10,
                            Code = "CLASS_LEVEL_8",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7361),
                            CreatedBy = 1,
                            IntValue1 = 8,
                            ShortText1 = "0 ème",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 11,
                            Code = "CLASS_LEVEL_9",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7375),
                            CreatedBy = 1,
                            IntValue1 = 9,
                            ShortText1 = "8 ème",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 12,
                            Code = "CLASS_LEVEL_10",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7539),
                            CreatedBy = 1,
                            IntValue1 = 10,
                            ShortText1 = "7 ème",
                            SysParamId = 2
                        },
                        new
                        {
                            Id = 13,
                            Code = "MONDAY",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7569),
                            CreatedBy = 1,
                            IntValue1 = 1,
                            ShortText1 = "Lundi",
                            SysParamId = 3
                        },
                        new
                        {
                            Id = 14,
                            Code = "TUESDAY",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7583),
                            CreatedBy = 1,
                            IntValue1 = 2,
                            ShortText1 = "Mardi",
                            SysParamId = 3
                        },
                        new
                        {
                            Id = 15,
                            Code = "WEDNESDAY",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7597),
                            CreatedBy = 1,
                            IntValue1 = 3,
                            ShortText1 = "Mercredi",
                            SysParamId = 3
                        },
                        new
                        {
                            Id = 16,
                            Code = "THURSDAY",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7610),
                            CreatedBy = 1,
                            IntValue1 = 4,
                            ShortText1 = "Jeudi",
                            SysParamId = 3
                        },
                        new
                        {
                            Id = 17,
                            Code = "FRIDAY",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7623),
                            CreatedBy = 1,
                            IntValue1 = 5,
                            ShortText1 = "Vendredi",
                            SysParamId = 3
                        },
                        new
                        {
                            Id = 18,
                            Code = "SATURDAY",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7640),
                            CreatedBy = 1,
                            IntValue1 = 6,
                            ShortText1 = "Samedi",
                            SysParamId = 3
                        },
                        new
                        {
                            Id = 19,
                            Code = "SUNDAY",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7653),
                            CreatedBy = 1,
                            IntValue1 = 7,
                            ShortText1 = "Dimanche",
                            SysParamId = 3
                        },
                        new
                        {
                            Id = 20,
                            Code = "40001",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7679),
                            CreatedBy = 1,
                            LongText1 = "School name is mandatory",
                            ShortText1 = "Name",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 21,
                            Code = "40002",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7692),
                            CreatedBy = 1,
                            LongText1 = "Invalid UserId while creating token",
                            ShortText1 = "UserId",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 22,
                            Code = "40003",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7706),
                            CreatedBy = 1,
                            LongText1 = "Invalid UserRole while creating token",
                            ShortText1 = "UserRole",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 24,
                            Code = "40004",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7719),
                            CreatedBy = 1,
                            LongText1 = "Invalid Login or Password",
                            ShortText1 = "Credentials",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 25,
                            Code = "40005",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7732),
                            CreatedBy = 1,
                            LongText1 = "Invalid Firstname",
                            ShortText1 = "Firstname",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 26,
                            Code = "40006",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7745),
                            CreatedBy = 1,
                            LongText1 = "Invalid Lastname",
                            ShortText1 = "Lastname",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 27,
                            Code = "40007",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7759),
                            CreatedBy = 1,
                            LongText1 = "Invalid Birthdate",
                            ShortText1 = "Birthdate",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 28,
                            Code = "40008",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7772),
                            CreatedBy = 1,
                            LongText1 = "Invalid Birthdate format. The valid format is 'dd/MM/yyyy'",
                            ShortText1 = "Birthdate",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 29,
                            Code = "40009",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7785),
                            CreatedBy = 1,
                            LongText1 = "Invalid Gender. The only valid gender is 'M' or 'F'",
                            ShortText1 = "Gender",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 30,
                            Code = "40010",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7798),
                            CreatedBy = 1,
                            LongText1 = "Invalid Login for Admin",
                            ShortText1 = "Login",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 40,
                            Code = "40011",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7811),
                            CreatedBy = 1,
                            LongText1 = "Invalid Password",
                            ShortText1 = "Password",
                            SysParamId = 4
                        },
                        new
                        {
                            Id = 41,
                            Code = "40012",
                            CreatedAt = new DateTime(2024, 3, 14, 23, 13, 2, 174, DateTimeKind.Local).AddTicks(7870),
                            CreatedBy = 1,
                            LongText1 = "The specified school does not exist",
                            ShortText1 = "SchoolID",
                            SysParamId = 4
                        });
                });

            modelBuilder.Entity("School.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("School.Core.Entities.Tutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Tutor");
                });

            modelBuilder.Entity("School.Core.Entities.Admin", b =>
                {
                    b.HasOne("School.Core.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("School.Core.Entities.Attendance", b =>
                {
                    b.HasOne("School.Core.Entities.ClassCalendar", "ClassCalendar")
                        .WithMany()
                        .HasForeignKey("ClassCalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Core.Entities.SysParamValue", "Status")
                        .WithMany()
                        .HasForeignKey("Status_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassCalendar");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("School.Core.Entities.Class", b =>
                {
                    b.HasOne("School.Core.Entities.SysParamValue", "Level")
                        .WithMany()
                        .HasForeignKey("Level_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Core.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("School");
                });

            modelBuilder.Entity("School.Core.Entities.ClassCalendar", b =>
                {
                    b.HasOne("School.Core.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Core.Entities.SysParamValue", "DayOfWeek")
                        .WithMany()
                        .HasForeignKey("DayOfWeek_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Core.Entities.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Core.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("DayOfWeek");

                    b.Navigation("SchoolYear");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("School.Core.Entities.SchoolYear", b =>
                {
                    b.HasOne("School.Core.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("School.Core.Entities.StudentHistory", b =>
                {
                    b.HasOne("School.Core.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Core.Entities.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("SchoolYear");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("School.Core.Entities.Subject", b =>
                {
                    b.HasOne("School.Core.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("School.Core.Entities.SysParamValue", b =>
                {
                    b.HasOne("School.Core.Entities.SysParam", "SysParam")
                        .WithMany()
                        .HasForeignKey("SysParamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SysParam");
                });

            modelBuilder.Entity("School.Core.Entities.Tutor", b =>
                {
                    b.HasOne("School.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
